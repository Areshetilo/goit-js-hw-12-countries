{"version":3,"sources":["webpack:///./js/color-switch.js","webpack:///./js/promise-task-01.js","webpack:///./js/promise-task-02.js","webpack:///./js/promise-task-03.js","webpack:///./js/timer.js","webpack:///./index.js"],"names":["colorSwitch","refs","start","document","querySelector","stop","timerId","isActive","colors","addEventListener","console","log","setInterval","body","style","backgroundColor","randomIntegerFromInterval","length","clearInterval","min","max","Math","floor","random","promiseTask01","delay","ms","Promise","resolve","setTimeout","logger","time","then","promiseTask02","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","promiseTask03","makeTransaction","transaction","reject","id","logSuccess","logError","warn","amount","catch","CountdownTimer","selector","targetDate","this","Date","valueDays","valueHours","valueMins","valueSecs","init","getTime","now","parseDate","textContent","pad","value","String","padStart"],"mappings":"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","file":"main.16cabd774aa9ec52d0e8.js","sourcesContent":["function colorSwitch() {\r\n\r\nconst refs = {\r\n  start: document.querySelector('button[data-action=\"start\"]'),\r\n  stop: document.querySelector('button[data-action=\"stop\"]')\r\n}\r\n\r\nlet timerId = null;\r\nlet isActive = false;\r\n\r\nconst colors = [\r\n  '#FFFFFF',\r\n  '#2196F3',\r\n  '#4CAF50',\r\n  '#FF9800',\r\n  '#009688',\r\n  '#795548',\r\n  '#FF0000',\r\n  '#00FF00',\r\n  '#FF1493',\r\n  '#FF4500',\r\n  '#008B8B',\r\n  '#FFFF00',\r\n  '#FF00FF',\r\n  '#0000FF',\r\n\r\n];\r\n\r\nrefs.start.addEventListener('click', onStart);\r\nrefs.stop.addEventListener('click', onStop);\r\n\r\nfunction onStart() {\r\n  if(isActive) return;\r\n  isActive = true;\r\n  console.log('работает');\r\n  timerId = setInterval(() => {\r\n    document.body.style.backgroundColor = colors[randomIntegerFromInterval(0, colors.length)];\r\n  }, 200);\r\n\r\n}\r\n\r\nfunction onStop() {\r\n  isActive = false;\r\n  clearInterval(timerId);\r\n}\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n}\r\nexport default colorSwitch;\r\n","function promiseTask01() {\r\n  const delay = ms => {\r\n    return new Promise (resolve => {\r\n      setTimeout(() => {\r\n        resolve(ms)\r\n      }, ms)\r\n    })\r\n  };\r\n\r\n  const logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\n  delay(2000).then(logger); // Resolved after 2000ms\r\n  delay(1000).then(logger); // Resolved after 1000ms\r\n  delay(1500).then(logger); // Resolved after 1500ms\r\n}\r\n\r\nexport default promiseTask01;\r\n","function promiseTask02() {\r\n\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n  })\r\n\r\n\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n}\r\n\r\nexport default promiseTask02;\r\n","function promiseTask03() {\r\n  const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n\r\n      setTimeout(() => {\r\n        const canProcess = Math.random() > 0.3;\r\n\r\n        if (canProcess) {\r\n          resolve({id: transaction.id, time: delay});\r\n        } else {\r\n          reject(transaction.id);\r\n        }\r\n      }, delay);\r\n    })\r\n\r\n  };\r\n\r\n  const logSuccess = ({id, time}) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n\r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n\r\n\r\n  /*\r\n   * Должно работать так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n\r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n}\r\n\r\nexport default promiseTask03;\r\n","export class CountdownTimer {\r\n  constructor({selector, targetDate}) {\r\n    this.targetDate = new Date (targetDate);\r\n    this.valueDays = document.querySelector(`${selector} .value[data-value=\"days\"]`);\r\n    this.valueHours = document.querySelector(`${selector} .value[data-value=\"hours\"]`);\r\n    this.valueMins = document.querySelector(`${selector} .value[data-value=\"mins\"]`);\r\n    this.valueSecs = document.querySelector(`${selector} .value[data-value=\"secs\"]`);\r\n  }\r\n\r\n  init () {\r\n    setInterval(() => {\r\n      const time = this.targetDate.getTime() - Date.now();\r\n      this.parseDate(time);\r\n    }, 1000)\r\n  }\r\n\r\n  parseDate(time) {\r\n    this.valueDays.textContent = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n    this.valueHours.textContent = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n    this.valueMins.textContent = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n    this.valueSecs.textContent = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  }\r\n\r\n  pad(value) {\r\n    return String(value).padStart(2, 0);\r\n  };\r\n\r\n}\r\n","import './styles.css';\nimport colorSwitch from './js/color-switch';\nimport promiseTask01 from './js/promise-task-01';\nimport promiseTask02 from './js/promise-task-02';\nimport promiseTask03 from './js/promise-task-03';\nimport { CountdownTimer } from './js/timer';\n\ncolorSwitch();\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jan 13, 2021'),\n});\ntimer.init();\n\n\npromiseTask01();\npromiseTask02();\npromiseTask03();\n\n"],"sourceRoot":""}